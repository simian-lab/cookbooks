# A heavily customized VCL to support WordPress
# Some items of note:
# - Allows for https (Via X-Forwarded-Proto)
# - Supports admin cookies for wp-admin
# - Caches everything
# - Support for custom error html page
#
# Taken from:
# https://gist.github.com/matthewjackowski/062be03b41a68edbadfc
#
# Somewhat influenced by:
# https://github.com/aahan/wp-server-config/blob/master/varnish/default.vcl

vcl 4.0;
import directors;
import std;

backend default {
  .host = "127.0.0.1";
  .port = "8080";
}

acl purge {
  "localhost";
  "127.0.0.1";
}

sub vcl_recv {
  # Only a single backend
  set req.backend_hint = default;

  if (req.url ~ "^/icons/") {
    return (synth(404, "Not Found"));
}

  <% if @force_ssl_dns != '' -%>
    # Redirect to SSL
    if ( (req.http.host ~ "^(?i)<%= @force_ssl_dns%>") && req.http.X-Forwarded-Proto !~ "(?i)https") {
      return (synth(750, ""));
    }
  <% end -%>

  # Setting http headers for backend
  if(req.http.X-Forwarded-For) {
    set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
  }
  else {
    set req.http.X-Forwarded-For = client.ip;
  }

  # Unset headers that might cause us to cache duplicate infos
  unset req.http.Accept-Language;

  if (req.method == "PURGE") {
    if (!client.ip ~ purge) {
      return (synth(405, "Not allowed."));
    }

    # We use ban instead of purge to support regex purging
    ban("req.http.host == " + req.http.host + " && req.url == " + req.url);
    return (synth(200, "Purged"));
  }

  # drop cookies and params from static assets
  if (req.url ~ "\.(gif|jpg|jpeg|svg|webp|webm|swf|ttf|css|js|flv|mp3|mp4|pdf|ico|png)(\?.*|)$") {
    unset req.http.cookie;
    set req.url = regsub(req.url, "\?.*$", "");
  }

  # drop tracking params
  if (req.url ~ "\?(utm_(campaign|medium|source|term)|adParams|client|cx|eid|fbid|feed|ref(id|src)?|v(er|iew))=") {
    set req.url = regsub(req.url, "\?.*$", "");
  }

  # Avoid xmlrpc attacks
  if (req.url ~ "xmlrpc.php") {
    return(synth(405, "Not allowed."));
  }

  # Don't cache PDF files
  if (req.url ~ "\.(pdf)(\?.*|)$") {
    return (pass);
  }

  # pass wp-admin urls
  if (req.url ~ "(wp-login|wp-admin)" || req.url ~ "preview=true" || req.url ~ "v1/preview" || req.url ~ "wp-cron") {
    return (pass);
  }

  # pass custom excluded urls
  <% if @url_exclusions != '' -%>
    <% @url_exclusions.each do |value| -%>
      if (req.url ~ "<%= value %>") {
        return (pass);
      }
    <%end -%>
  <% end -%>

  # pass custom excluded hosts
  <% if @host_exclusions != '' -%>
    <% @host_exclusions.each do |value| -%>
      if (req.http.host ~ "<%= value %>") {
        return (pass);
      }
    <%end -%>
  <% end -%>

  # pass wp-admin cookies
  if (req.http.cookie) {
    if (req.http.cookie ~ "(wordpress_|wp-settings-)") {
      return(pass);
    }
    else {
      unset req.http.cookie;
    }
  }
}

sub vcl_backend_response {
  if (beresp.http.Content-Length && beresp.http.Content-Length == "0") {
    set beresp.uncacheable = true;
    set beresp.http.X-Cache-Debug = "Not cached, zero Content-Length";
    return (deliver);
}

  # avoid cache error responses
  if ( beresp.status == 500 || beresp.status == 502 || beresp.status == 503 || beresp.status == 504 ) {
    return(abandon);
  }

  if (beresp.status == 403) {
    set beresp.ttl = 0s;
    set beresp.uncacheable = true;
    set beresp.http.cache-control = "private, no-cache, no-store, must-revalidate";
  }

  # unset cookies from backendresponse
  if (!(bereq.url ~ "(wp-login|wp-admin)")) {
    set beresp.http.X-UnsetCookies = "TRUE";
    unset beresp.http.set-cookie;
    # Set how long Varnish will keep it
    set beresp.ttl = 15m;
    set beresp.http.cache-control = "public, max-age=900";
  }

  # long ttl for assets
  if (bereq.url ~ "\.(gif|jpg|jpeg|swf|svg|webp|webm|ttf|css|js|flv|mp3|mp4|pdf|ico|png)(\?.*|)$") {
    # Set how long Varnish will keep it
    set beresp.ttl = 365d;
    set beresp.http.cache-control = "public, max-age=31536000";
  }

  if (bereq.http.Cookie ~ "(UserID|_session)") {
    # if we get a session cookie... caching is a no-go
    set beresp.http.X-Cacheable = "NO:Got Session";
    set beresp.uncacheable = true;
    return (deliver);
  }
  elseif (beresp.ttl <= 0s) {
    # Varnish determined the object was not cacheable
    set beresp.http.X-Cacheable = "NO:Not Cacheable";
    set beresp.uncacheable = true;
    return (deliver);
  }
  elseif (beresp.http.set-cookie) {
    # You don't wish to cache content for logged in users
    set beresp.http.X-Cacheable = "NO:Set-Cookie";
    set beresp.uncacheable = true;
    return (deliver);
  }
  elseif (beresp.http.Cache-Control ~ "private") {
    # You are respecting the Cache-Control=private header from the backend
    set beresp.http.X-Cacheable = "NO:Cache-Control=private";
    set beresp.uncacheable = true;
    return (deliver);
  }
  else {
    # Varnish determined the object was cacheable
    set beresp.http.X-Cacheable = "YES";
    set beresp.uncacheable = false;

    # If not defined set how long Varnish will keep it
    if (!beresp.ttl) {
      set beresp.ttl = 15m;
    }
    if (!beresp.http.cache-control) {
      set beresp.http.cache-control = "public, max-age=900";
    }

    # marker for vcl_deliver to reset Age:
    set beresp.http.magicmarker = "1";

    # Set expires from varnish not backend
    unset beresp.http.expires;
    set beresp.http.expires = beresp.ttl;


    # Set How long browsers will keep the cache
    if ((bereq.url ~ "(preview=true|v1/preview)")) {
      set beresp.http.cache-control = "no-cache";
    }

    # set headers for excluded urls - avoid browser cache
    <% if @url_exclusions != '' -%>
      <% @url_exclusions.each do |value| -%>
        if (bereq.url ~ "<%= value %>") {
          set beresp.http.cache-control = "no-cache";
          set beresp.http.X-Cacheable = "NO:Not Cacheable";
        }
      <%end -%>
    <% end -%>

    # set headers for excluded hosts - avoid browser cache
    <% if @host_exclusions != '' -%>
      <% @host_exclusions.each do |value| -%>
        if (bereq.http.host ~ "<%= value %>") {
          set beresp.http.cache-control = "no-cache";
          set beresp.http.X-Cacheable = "NO:Not Cacheable";
        }
      <%end -%>
    <% end -%>
  }

  unset beresp.http.server;
  unset beresp.http.Powered-By-X;
  set beresp.grace = 1w;
}

sub vcl_hash {
  if ( req.http.X-Forwarded-Proto ) {
    hash_data( req.http.X-Forwarded-Proto );
  }
}

sub vcl_synth {
  if (resp.status == 503) {
    <% if @errorpage != '' -%>
    synthetic(std.fileread("<%= @errorpage %>"));
    <% end -%>
    return(deliver);
  }
}

sub vcl_backend_error {
  if (beresp.status == 503 && bereq.retries == 5) {
    <% if @errorpage != '' -%>
    synthetic(std.fileread("<%= @errorpage %>"));
    <% end -%>
    return(deliver);
  }
}

sub vcl_deliver {
  # oh noes backend is down
  if (resp.status == 503) {
    return(restart);
  }

  if (resp.http.magicmarker) {
    # Remove the magic marker
    unset resp.http.magicmarker;

    # By definition we have a fresh object
    set resp.http.age = "0";
  }

  if (obj.hits > 0) {
    set resp.http.X-Cache = "HIT";
  }
  else {
    set resp.http.X-Cache = "MISS";
  }
}

sub vcl_hit {
  if (req.method == "PURGE") {
    return(synth(200, "OK"));
  }
}

sub vcl_miss {
  if (req.method == "PURGE") {
    return (synth(404, "Not cached"));
  }
}

<% if @force_ssl_dns != '' -%>
sub vcl_synth {
  if (resp.status == 750) {
    set resp.status = 301;
    set resp.http.Location = "https://<%= @force_ssl_dns%>" + req.url;
    return(deliver);
  }
}
<% end -%>
